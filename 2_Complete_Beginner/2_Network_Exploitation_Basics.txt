Read 1_Network_Fundamentals alongside this as a supplement

Network Exploitation Basics
----------------------------
	OSI Model
		I already took notes on the OSI model in the 1. Pre security section so I'm just going to copy/paste this entire section because it's important

		The OSI model is not actually used perfectly in the real world, but it's helpful for learning networking
		The OSI (Open Systems Interconnection) Model is a standardised model which we use to demonstrate the theory behind computer networking. In practice, it's actually the more compact TCP/IP model that real-world networking is based off; however the OSI model, in many ways, is easier to get an initial understanding from.
		There are many mnemonics floating around to help you learn the layers of the OSI model -- search around until you find one that you like.
			I personally favour: Anxious Pale Shakespeare Treated Nervous Drunks Patiently

		The OSI model consists of seven layers:

			Layer 7 -- Application:
			The application layer of the OSI model essentially provides networking options to programs running on a computer. It works almost exclusively with applications, providing an interface for them to use in order to transmit data. When data is given to the application layer, it is passed down into the presentation layer.

			Layer 6 -- Presentation:
			The presentation layer receives data from the application layer. This data tends to be in a format that the application understands, but it's not necessarily in a standardised format that could be understood by the application layer in the receiving computer. The presentation layer translates the data into a standardised format, as well as handling any encryption, compression or other transformations to the data. With this complete, the data is passed down to the session layer.

			Layer 5 -- Session:
			When the session layer receives the correctly formatted data from the presentation layer, it looks to see if it can set up a connection with the other computer across the network. If it can't then it sends back an error and the process goes no further. If a session can be established then it's the job of the session layer to maintain it, as well as co-operate with the session layer of the remote computer in order to synchronise communications. The session layer is particularly important as the session that it creates is unique to the communication in question. This is what allows you to make multiple requests to different endpoints simultaneously without all the data getting mixed up (think about opening two tabs in a web browser at the same time)! When the session layer has successfully logged a connection between the host and remote computer the data is passed down to Layer 4: the transport Layer.
			
			Layer 4 -- Transport:
			The transport layer is a very interesting layer that serves numerous important functions. Its first purpose is to choose the protocol over which the data is to be transmitted. The two most common protocols in the transport layer are TCP (Transmission Control Protocol) and UDP (User Datagram Protocol); with TCP the transmission is connection-based which means that a connection between the computers is established and maintained for the duration of the request. This allows for a reliable transmission, as the connection can be used to ensure that the packets all get to the right place. A TCP connection allows the two computers to remain in constant communication to ensure that the data is sent at an acceptable speed, and that any lost data is re-sent. With UDP, the opposite is true; packets of data are essentially thrown at the receiving computer -- if it can't keep up then that's its problem (this is why a video transmission over something like Skype can be pixelated if the connection is bad). What this means is that TCP would usually be chosen for situations where accuracy is favoured over speed (e.g. file transfer, or loading a webpage), and UDP would be used in situations where speed is more important (e.g. video streaming).
			With a protocol selected, the transport layer then divides the transmission up into bite-sized pieces (over TCP these are called segments, over UDP they're called datagrams), which makes it easier to transmit the message successfully. 

			Layer 3 -- Network:
			The network layer is responsible for locating the destination of your request. For example, the Internet is a huge network; when you want to request information from a webpage, it's the network layer that takes the IP address for the page and figures out the best route to take. At this stage we're working with what is referred to as Logical addressing (i.e. IP addresses) which are still software controlled. Logical addresses are used to provide order to networks, categorising them and allowing us to properly sort them. Currently the most common form of logical addressing is the IPV4 format, which you'll likely already be familiar with (i.e 192.168.1.1 is a common address for a home router).

			Layer 2 -- Data Link:
			The data link layer focuses on the physical addressing of the transmission. It receives a packet from the network layer (that includes the IP address for the remote computer) and adds in the physical (MAC) address of the receiving endpoint. Inside every network enabled computer is a Network Interface Card (NIC) which comes with a unique MAC (Media Access Control) address to identify it.
			MAC addresses are set by the manufacturer and literally burnt into the card; they can't be changed -- although they can be spoofed. When information is sent across a network, it's actually the physical address that is used to identify where exactly to send the information.
			Additionally, it's also the job of the data link layer to present the data in a format suitable for transmission.
			The data link layer also serves an important function when it receives data, as it checks the received information to make sure that it hasn't been corrupted during transmission, which could well happen when the data is transmitted by layer 1: the physical layer.

			Layer 1 -- Physical:
			The physical layer is right down to the hardware of the computer. This is where the electrical pulses that make up data transfer over a network are sent and received. It's the job of the physical layer to convert the binary data of the transmission into signals and transmit them across the network, as well as receiving incoming signals and converting them back into binary data.
	
	Encapsulation
		encapsulation - processes and addition of info to data
		As data is passed down each layer of the OSI model, more information (in the form of headers - data at start of transmission - and trailers - data at end of transmission) containing details specific to each layer is added onto the transmission
			Ex. Network layer would include source and destination IP addresses
			Ex. Transportation layer would include information specific to protocol being used
			The data link layer adds a piece on end of transmission so the data can't be intercepted and tampered with without breaking the trailer
		The encapsulated data is gived a different name at each step of the process, depending on the changes the layers make on the data

		de-encapsulation - when message is received by the second computer it reverses the process (starting at the physical layer and working up until it reaches application layer, stripping off info as it goes)
	
	TCP/IP Model
		Created by DoD to provide a standard for manufacturers to follow
		Very similar to the OSI model; few years older, serves as basis for real-world networking
		4 layers that cover same range as OSI model:
			Application
			Transport
			Internet
			Network Interface
		Process of encapsulation and decapsulation work in same way as OSI
		Each of the four layers is actually a protocol, TCP and IP are two of the most important ones
	
	Networking Tools
		Ping
			Test if connection to a remote resource is possible
			Uses the ICMP protocol, a type of TCP/IP protocol
			Works on the network layer of OSI and Internet layer of TCP/IP
			ping <target>
			Ping returns the ip address of the server hosting the website

		Traceroute
			Maps the path your request takes as it goes to the target machine
			traceroute <destination>
			Operates over UDP
			Windows traceroute utility (tracert) uses ICMP

		Whois
			Query who a domain name is registered to
			whois <domain>

		Dig
			Manually query recursive DNS servers of our choice, find the ip address of a url
			dig <domain> @<dns-server-ip>


Network Services
-----------------
	Understanding SMB
		Server Message Block Protocol (SMB) - client-side communication protocol used for sharing access to files, printers, serial ports, and other resources in a network
		response-request protocol - a type of protocol that transmits multiple messages betweeen the client and server to establish a connection
		Clients connect to server using TCP/IP
		After connecting clients send messages (SMBs) to the server to manage files

		Windows supports smb since windows 95, samba is an open source server for unix
			Look for "netbios-ssn" and "microsoft-ds"

	Enumerating SMB
		Use tools to scan ports and find as much info about services, applications, structure, and os
			Nmap
			Enum4linux
				The syntax of Enum4Linux is nice and simple: "enum4linux [options] ip"

				TAG            FUNCTION

				-U             get userlist
				-M             get machine list
				-N             get namelist dump (different from -U and-M)
				-S             get sharelist
				-P             get password policy information
				-G             get group and member list

				-A             all of the above (full basic enumeration)

		Use both to enumerate info
	
	Exploiting SMB
		Check vulnerabilities on exploitdb, NVD, CVE mitre, etc
		Use misconfigurations in the system, such as anonymous SMB share access in this case

		We know
			SMB share location
			Name of interesting SMB share

		Use a SMB client (like SMBClient, which is part of samba) to access resources
			Read docs for info
			Basic syntax:
				smbclient //<IP>/<Share name> -U [username] -p [port]
					Username and ports can be found using nmap and Enum4linux

		Check if share has been configured to allow anonymous access (no auth needed to access share)
			1. Use the username "Anonymous"
			2. Connect to the share found during enumeration
			3. Don't supply a password (just hit enter if it asks for a password)
	
	Understanding Telnet
		Telnet protocol - an application protocol; with the use of a telnet client you can connect to and execute clients on a remote machine that's hosting a telnet server
		Sends all data in plaintext, so it has been replaced by ssh
		To connect to another machine "telnet [ip] [port]"

	Exploiting Telnet
		Telnet sends all data in plaintext
		Check for telnet vulnerabilities with CVE ID

	Understanding FTP
		File Transfer Protocol (FTP) - used to allow remote transfer of files over a network
		Uses a client-server model - the client initiates a connection with the server, and the server validates the credentials
		Uses two channels
			command channel - used to transmit commands and replies to those commands
			data channel - used for transferring data
			Using two channels allows for commands to be sent without having to wait for the current data transfer to finish
		Active vs Passive
			FTP server can support active or passive connections
			Active - the client opens a port and listens, the server is required to actively connect to it
			Passive - the server opens a port a listens (passively) and the client connects to it
		Both the command and data channels are unencrypted

	Enumerating FTP
		Check for anonymous login
		Login with "ftp <ip address>" and entering "anonymous" as user and no password

	Exploiting FTP
